# Attachment A.12 for n=6 to 5

# All APN functions found using the algorithm "A.11" for 11 pairwise EA-inequivalent quadratic APN functions G listed in "chapter4-algorithm4-A11-output-n7.py".

# Look-up tables, commented in the functions correspod to the function from EA-equivalence class 10 (and in the function "functions_without_APN_trim()" to the EA-equivalence class 13) from [A.8].

"""
REFERENCES: Chapter 4 of the thesis
            Chapter 2 of the thesis
            [1] - Christof Beirle, Gregor Leander and Leo Perrin - Trims and extensions of quadratic APN functions
            [8] - LPP-crypto/sboxu: Tools for studying S-boxes (https://github.com/lpp-crypto/sboxU)
            [A.8] - results A.8 for n=6
"""

"""
The number of input functions that have an APN trim in their trim spectrum: 9
The number of input functions which have no APN trim in their trim spectrum: 2
The dimension of the functions G: 5
The number of quadratic functions among the found APN trims: 9 (using the observation from Chapter 2 of the thesis)
The number of EA-equivalence classes of functions G: 2 (using the "Algorithm 2 - modified")
"""



"""
The file contains the following functions that return a list of functions:
- classified_functions_G()
        - function returns representatives of EA-equivalence classes of functions G


        
Remaining results:
The file contains the following functions that return a list of functions:
- functions_G()
        - function returns list of all functions G:F_2^5 -> F_2^5
        - commented function G:F_2^5 -> F_2^5 obtained for representative of EA-equivalence class 10 from [A.8]
           (the representative: [0, 17, 62, 28, 35, 19, 38, 37, 14, 19, 34, 12, 58, 6, 45, 34, 41, 10, 55, 39, 15, 13, 42, 27, 55, 24, 59, 39, 6, 8, 49, 12, 53, 2, 61, 57, 8, 30, 59, 30, 28, 39, 6, 14, 54, 44, 23, 62, 56, 61, 16, 38, 0, 36, 19, 4, 1, 8, 59, 1, 46, 6, 47, 52])

- parameters_of_APN_trims()
        - parameters alpha, beta, gamma, epsilon for which we could find APN trims
        - commented parameters for which we could find APN trim for the representative of EA-equivalence class 10 from [A.8]

- functions_with_APN_trim()
        - list of input functions (from the file "chapter4-algorithm4-A11-output-n7.py") with APN functions in their trim spectrum
        - commented representative of EA-equivalence class 10 from [A.8]

- functions_without_APN_trim()
        - list of input functions (from the file "chapter4-algorithm4-A11-output-n7.py") without APN functions in their trim spectrum
        - commented representative of EA-equivalence class 13 from [A.8]
        
- APN_trims()
        - list of trims of a functions as they were obtained during execution of the algorithm (list containing 2^6 values, of which 2^5 are equal to init_value=-1)
        - commented trim of a representative of EA-equivalence class 10 from [A.8]
"""


# representatives of EA-equivalence classes
def classified_functions_G():
    return[
[0, 4, 16, 12, 6, 19, 20, 25, 0, 18, 31, 21, 18, 17, 15, 20, 5, 24, 19, 22, 10, 6, 30, 10, 22, 29, 15, 28, 13, 23, 22, 20],
[0, 4, 4, 24, 5, 4, 22, 15, 20, 18, 27, 5, 21, 22, 13, 22, 2, 20, 0, 14, 29, 14, 8, 3, 0, 20, 9, 5, 27, 10, 5, 12]
]


# functions G which are obtained from the APN trims
def functions_G():
    return[
[0, 4, 16, 12, 6, 19, 20, 25, 0, 18, 31, 21, 18, 17, 15, 20, 5, 24, 19, 22, 10, 6, 30, 10, 22, 29, 15, 28, 13, 23, 22, 20],
[0, 4, 4, 24, 5, 4, 22, 15, 20, 18, 27, 5, 21, 22, 13, 22, 2, 20, 0, 14, 29, 14, 8, 3, 0, 20, 9, 5, 27, 10, 5, 12],
[0, 0, 24, 14, 2, 10, 19, 13, 18, 15, 9, 2, 21, 0, 7, 4, 15, 9, 19, 3, 22, 24, 3, 27, 23, 12, 8, 5, 11, 24, 29, 24],
[0, 7, 31, 17, 6, 5, 31, 21, 18, 8, 9, 26, 12, 18, 17, 6, 14, 18, 25, 12, 3, 27, 18, 3, 18, 19, 1, 9, 7, 2, 18, 30],
[0, 23, 20, 15, 6, 22, 16, 12, 20, 13, 26, 15, 19, 13, 31, 13, 8, 8, 0, 12, 20, 19, 30, 21, 16, 30, 2, 0, 13, 4, 29, 24],
[0, 2, 11, 21, 13, 24, 5, 12, 6, 20, 8, 6, 9, 12, 4, 29, 17, 6, 29, 22, 3, 3, 12, 16, 4, 3, 13, 22, 20, 4, 30, 18],
[0, 20, 13, 21, 2, 28, 2, 16, 14, 18, 25, 9, 28, 10, 6, 28, 10, 5, 26, 25, 23, 18, 10, 3, 15, 8, 5, 14, 2, 15, 5, 4],
[0, 11, 19, 20, 21, 0, 7, 30, 8, 11, 18, 29, 19, 14, 8, 25, 24, 18, 23, 17, 9, 29, 7, 31, 27, 25, 29, 19, 4, 24, 3, 19],
[0, 15, 26, 25, 3, 6, 18, 27, 1, 0, 6, 11, 4, 15, 8, 15, 31, 3, 16, 0, 19, 5, 23, 13, 8, 26, 26, 4, 2, 26, 27, 15]
# [0, 23, 19, 1, 14, 4, 31, 16, 25, 2, 30, 0, 9, 15, 12, 15, 13, 21, 31, 2, 9, 12, 25, 25, 13, 25, 11, 26, 23, 30, 19, 31]
 ]

# parameters \alpha, \beta, \gamma, \epsilon for which we could find APN trim
def parameters_of_APN_trims():
    return[
[1, 3, 1, 0],
[2, 1, 1, 0],
[1, 40, 8, 0],
[1, 25, 1, 0],
[1, 13, 1, 0],
[3, 23, 1, 0],
[1, 22, 2, 0],
[1, 6, 2, 0],
[2, 9, 1, 0]
# [1, 24, 8, 0]
    ]

# input functions with APN functions in their trim spectrum
def functions_with_APN_trim():
    return[
[0, 5, 40, 51, 3, 2, 26, 5, 24, 54, 23, 39, 17, 59, 47, 27, 1, 24, 50, 53, 62, 35, 60, 63, 9, 59, 29, 49, 60, 10, 25, 49, 8, 28, 6, 12, 18, 2, 45, 35, 50, 13, 27, 58, 34, 25, 58, 31, 15, 7, 26, 12, 41, 37, 13, 31, 37, 6, 23, 42, 9, 46, 10, 51],
[0, 17, 36, 14, 10, 1, 51, 3, 40, 46, 6, 59, 43, 55, 24, 63, 8, 1, 63, 13, 55, 36, 29, 53, 27, 5, 38, 3, 45, 41, 13, 50, 8, 10, 61, 4, 18, 10, 58, 25, 8, 29, 55, 25, 27, 20, 57, 13, 6, 28, 32, 1, 41, 41, 18, 41, 61, 48, 17, 39, 27, 12, 42, 6],
[0, 56, 30, 42, 57, 28, 53, 28, 56, 22, 21, 55, 37, 22, 26, 37, 3, 23, 25, 1, 10, 3, 2, 7, 25, 27, 48, 62, 52, 43, 15, 28, 0, 16, 10, 22, 30, 19, 6, 7, 18, 20, 43, 33, 40, 51, 3, 20, 62, 2, 48, 0, 16, 49, 12, 33, 14, 36, 51, 21, 4, 51, 43, 16],
[0, 62, 5, 63, 11, 17, 18, 12, 24, 7, 48, 43, 12, 55, 56, 7, 39, 14, 63, 18, 36, 41, 32, 41, 39, 47, 18, 30, 59, 23, 18, 58, 56, 18, 18, 60, 29, 19, 43, 33, 49, 58, 54, 57, 11, 36, 16, 59, 59, 6, 12, 53, 22, 15, 61, 32, 42, 54, 48, 40, 24, 32, 30, 34],
[0, 48, 4, 6, 7, 37, 15, 31, 24, 3, 7, 46, 63, 54, 44, 23, 7, 2, 13, 58, 22, 1, 16, 53, 2, 44, 19, 15, 51, 15, 46, 32, 58, 36, 9, 37, 33, 45, 30, 32, 26, 47, 50, 53, 33, 6, 5, 16, 60, 23, 1, 24, 49, 8, 0, 11, 1, 1, 39, 21, 44, 62, 6, 38],
[0, 29, 61, 34, 15, 9, 27, 31, 59, 19, 13, 39, 51, 0, 44, 29, 52, 2, 26, 46, 19, 62, 20, 59, 40, 43, 13, 12, 8, 16, 4, 30, 16, 55, 61, 24, 10, 54, 14, 48, 6, 20, 32, 48, 27, 18, 20, 31, 42, 38, 20, 26, 24, 15, 15, 26, 27, 34, 46, 21, 46, 12, 50, 18],
[0, 46, 2, 4, 28, 40, 60, 32, 6, 39, 57, 48, 13, 54, 16, 3, 58, 52, 3, 37, 37, 49, 62, 2, 16, 17, 20, 61, 24, 3, 62, 13, 31, 10, 62, 3, 7, 8, 4, 35, 13, 23, 17, 35, 2, 2, 60, 20, 63, 10, 37, 56, 36, 11, 28, 27, 1, 59, 38, 52, 13, 45, 8, 0],
[0, 48, 5, 55, 2, 17, 53, 36, 47, 58, 36, 51, 55, 1, 14, 58, 55, 37, 63, 47, 17, 32, 43, 24, 62, 9, 56, 13, 2, 22, 54, 32, 50, 45, 17, 12, 52, 8, 37, 27, 6, 60, 43, 19, 26, 3, 5, 30, 9, 52, 39, 24, 43, 53, 55, 43, 27, 3, 59, 33, 35, 24, 49, 8],
[0, 62, 2, 62, 41, 13, 57, 31, 57, 59, 17, 17, 1, 25, 59, 33, 31, 2, 35, 60, 17, 22, 63, 58, 18, 51, 4, 39, 13, 54, 9, 48, 60, 48, 43, 37, 9, 31, 12, 24, 24, 40, 37, 23, 60, 22, 19, 59, 47, 0, 6, 43, 61, 8, 6, 49, 63, 44, 60, 45, 60, 53, 45, 38]
# [0, 17, 62, 28, 35, 19, 38, 37, 14, 19, 34, 12, 58, 6, 45, 34, 41, 10, 55, 39, 15, 13, 42, 27, 55, 24, 59, 39, 6, 8, 49, 12, 53, 2, 61, 57, 8, 30, 59, 30, 28, 39, 6, 14, 54, 44, 23, 62, 56, 61, 16, 38, 0, 36, 19, 4, 1, 8, 59, 1, 46, 6, 47, 52]
]

# input functions without APN functions in their trim spectrum
def functions_without_APN_trim():
    return[
[0, 25, 22, 57, 13, 45, 26, 12, 24, 0, 50, 28, 27, 58, 48, 39, 10, 17, 57, 20, 46, 12, 28, 8, 58, 32, 53, 25, 16, 51, 30, 11, 29, 14, 44, 9, 2, 40, 50, 46, 53, 39, 56, 28, 36, 15, 40, 53, 59, 42, 47, 8, 13, 37, 24, 6, 59, 43, 19, 53, 3, 42, 42, 53],
[0, 21, 23, 60, 25, 32, 36, 35, 24, 26, 31, 35, 30, 48, 51, 35, 6, 62, 12, 10, 33, 53, 1, 43, 59, 20, 33, 48, 3, 0, 51, 14, 47, 8, 16, 9, 18, 25, 7, 50, 0, 48, 47, 33, 34, 62, 39, 5, 43, 33, 9, 61, 40, 14, 32, 56, 33, 60, 19, 48, 61, 12, 37, 42]
# [9, 46, 15, 38, 19, 8, 43, 62, 26, 56, 58, 22, 6, 24, 24, 8, 3, 8, 3, 6, 56, 15, 6, 63, 63, 49, 25, 25, 2, 48, 26, 38, 20, 63, 9, 44, 37, 50, 6, 31, 18, 60, 41, 9, 37, 55, 32, 60, 17, 22, 10, 3, 1, 58, 36, 17, 56, 58, 5, 9, 46, 16, 45, 29]
    ]

# APN trims
def APN_trims():
    return[
[0, -1, 40, -1, 0, -1, 26, -1, 24, -1, 20, -1, 18, -1, 44, -1, 2, -1, 50, -1, 62, -1, 60, -1, 10, -1, 30, -1, 60, -1, 26, -1, 8, -1, 6, -1, 18, -1, 46, -1, 50, -1, 24, -1, 34, -1, 58, -1, 12, -1, 26, -1, 42, -1, 14, -1, 38, -1, 20, -1, 10, -1, 10, -1],
[0, 16, -1, -1, 10, 0, -1, -1, 40, 46, -1, -1, 42, 54, -1, -1, 8, 0, -1, -1, 54, 36, -1, -1, 26, 4, -1, -1, 44, 40, -1, -1, 8, 10, -1, -1, 18, 10, -1, -1, 8, 28, -1, -1, 26, 20, -1, -1, 6, 28, -1, -1, 40, 40, -1, -1, 60, 48, -1, -1, 26, 12, -1, -1],
[0, -1, 54, -1, 17, -1, 53, -1, 16, -1, 21, -1, 37, -1, 50, -1, 3, -1, 49, -1, 34, -1, 2, -1, 49, -1, 48, -1, 52, -1, 39, -1, 0, -1, 34, -1, 54, -1, 6, -1, 18, -1, 3, -1, 0, -1, 3, -1, 22, -1, 48, -1, 16, -1, 36, -1, 38, -1, 51, -1, 4, -1, 3, -1],
[0, -1, 28, -1, 18, -1, 18, -1, 24, -1, 48, -1, 12, -1, 56, -1, 62, -1, 38, -1, 36, -1, 32, -1, 62, -1, 18, -1, 34, -1, 18, -1, 56, -1, 18, -1, 4, -1, 50, -1, 40, -1, 54, -1, 18, -1, 16, -1, 34, -1, 12, -1, 22, -1, 36, -1, 42, -1, 48, -1, 24, -1, 30, -1],
[0, -1, 4, -1, 10, -1, 2, -1, 24, -1, 10, -1, 50, -1, 44, -1, 10, -1, 0, -1, 22, -1, 16, -1, 2, -1, 30, -1, 62, -1, 46, -1, 58, -1, 4, -1, 44, -1, 30, -1, 26, -1, 50, -1, 44, -1, 8, -1, 60, -1, 12, -1, 60, -1, 0, -1, 12, -1, 42, -1, 44, -1, 6, -1],
[0, -1, -1, 34, 24, -1, -1, 8, 44, -1, -1, 48, 36, -1, -1, 10, 52, -1, -1, 46, 4, -1, -1, 44, 40, -1, -1, 12, 8, -1, -1, 30, 16, -1, -1, 24, 10, -1, -1, 48, 6, -1, -1, 48, 12, -1, -1, 8, 42, -1, -1, 26, 24, -1, -1, 26, 12, -1, -1, 2, 46, -1, -1, 18],
[0, -1, 20, -1, 28, -1, 60, -1, 16, -1, 57, -1, 13, -1, 16, -1, 44, -1, 21, -1, 37, -1, 40, -1, 16, -1, 20, -1, 24, -1, 40, -1, 9, -1, 40, -1, 17, -1, 4, -1, 13, -1, 17, -1, 20, -1, 60, -1, 41, -1, 37, -1, 36, -1, 28, -1, 1, -1, 48, -1, 13, -1, 8, -1],
[0, -1, 5, -1, 4, -1, 53, -1, 41, -1, 36, -1, 49, -1, 8, -1, 49, -1, 57, -1, 17, -1, 45, -1, 56, -1, 56, -1, 4, -1, 48, -1, 52, -1, 17, -1, 52, -1, 37, -1, 0, -1, 45, -1, 28, -1, 5, -1, 9, -1, 33, -1, 45, -1, 49, -1, 29, -1, 61, -1, 37, -1, 49, -1],
[0, 62, -1, -1, 32, 4, -1, -1, 48, 50, -1, -1, 8, 16, -1, -1, 22, 2, -1, -1, 24, 22, -1, -1, 18, 58, -1, -1, 4, 54, -1, -1, 60, 48, -1, -1, 0, 22, -1, -1, 24, 40, -1, -1, 60, 22, -1, -1, 38, 0, -1, -1, 52, 8, -1, -1, 54, 44, -1, -1, 60, 60, -1, -1]
# [0, -1, 38, -1, 35, -1, 38, -1, 22, -1, 34, -1, 34, -1, 53, -1, 49, -1, 55, -1, 23, -1, 50, -1, 55, -1, 35, -1, 6, -1, 49, -1, 53, -1, 37, -1, 16, -1, 35, -1, 4, -1, 6, -1, 54, -1, 23, -1, 32, -1, 16, -1, 0, -1, 19, -1, 1, -1, 35, -1, 54, -1, 55, -1]
]
